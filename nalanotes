bindings:
let five = 5;
let ten = 10;
	
named function def choices bindings:
let add = fn(x, y) {
    x + y;	
};

nameless function def choices:
fn(x, y) { x + y }

operators:
!-/*%5;
5 < 10 > 5;
10 == 10;
10 != 9;

func calls:
let result = add(five, ten);

conds:
if (5 < 10) {
    return true;
} else {
    return false;
}

literals:	
"foobar";
"foo bar"
[1, 2, 10 > 5];
{ "foo" : "bar" }
fn(x) { x }

ellisp extenstions:
cons(1, 2)  => need to impl cons and list
list(1, 2, 3)  => need to impl cons and list
